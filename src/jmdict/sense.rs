use super::Gloss;

// sense
#[derive(serde::Serialize, serde::Deserialize)]
pub struct Sense {
    // gloss
    pub glosses: Vec<Gloss>,
    // stagk, stagr, xref, ant, pos, field, misc, dial, pri, s_inf
    #[serde(skip)]
    pub tags:    Vec<SenseTag>,
    // example
    // pub example: Vec<String>,
}

// TODO: Parse reference string and build out this struct more
#[derive(serde::Serialize, serde::Deserialize)]
pub struct CrossReference(pub compact_str::CompactString);

#[derive(serde::Serialize, serde::Deserialize)]
pub enum SenseTag {
    // stagk
    OnlyForKanji(String),
    // stagr
    OnlyForReading(String),
    // lsource
    SourceLanguage(SourceLanguage),
    // xref
    SeeAlso(CrossReference),
    // ant
    Antonym(CrossReference),
    // pos
    PartOfSpeech(PartOfSpeech),
    // field
    Field(Field),
    // misc
    Misc(Misc),
    // dial
    Dialect(Dialect),
    // pri
    Highlight,
    // s_inf
    Info(String),
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct SourceLanguage {
    pub lang: isolang::Language,
    pub text: compact_str::CompactString,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, strum::EnumString)]
#[derive(serde::Serialize, serde::Deserialize)]
#[rustfmt::skip]
pub enum PartOfSpeech {
    #[strum(serialize = "noun or verb acting prenominally")] AdjF,
    #[strum(serialize = "adjective (keiyoushi)")] AdjI,
    #[strum(serialize = "adjective (keiyoushi) - yoi/ii class")] AdjIx,
    #[strum(serialize = "'kari' adjective (archaic)")] AdjKari,
    #[strum(serialize = "'ku' adjective (archaic)")] AdjKu,
    #[strum(serialize = "adjectival nouns or quasi-adjectives (keiyodoshi)")] AdjNa,
    #[strum(serialize = "archaic/formal form of na-adjective")] AdjNari,
    #[strum(serialize = "nouns which may take the genitive case particle 'no'")] AdjNo,
    #[strum(serialize = "pre-noun adjectival (rentaishi)")] AdjPn,
    #[strum(serialize = "'shiku' adjective (archaic)")] AdjShiku,
    #[strum(serialize = "'taru' adjective")] AdjT,
    #[strum(serialize = "adverb (fukushi)")] Adv,
    #[strum(serialize = "adverb taking the 'to' particle")] AdvTo,
    #[strum(serialize = "auxiliary")] Aux,
    #[strum(serialize = "auxiliary adjective")] AuxAdj,
    #[strum(serialize = "auxiliary verb")] AuxV,
    #[strum(serialize = "conjunction")] Conj,
    #[strum(serialize = "copula")] Cop,
    #[strum(serialize = "counter")] Ctr,
    #[strum(serialize = "expressions (phrases, clauses, etc.)")] Exp,
    #[strum(serialize = "interjection (kandoushi)")] Int,
    #[strum(serialize = "noun (common) (futsuumeishi)")] N,
    #[strum(serialize = "adverbial noun (fukushitekimeishi)")] NAdv,
    #[strum(serialize = "proper noun")] NPr,
    #[strum(serialize = "noun, used as a prefix")] NPref,
    #[strum(serialize = "noun, used as a suffix")] NSuf,
    #[strum(serialize = "noun (temporal) (jisoumeishi)")] NT,
    #[strum(serialize = "numeric")] Num,
    #[strum(serialize = "pronoun")] Pn,
    #[strum(serialize = "prefix")] Pref,
    #[strum(serialize = "particle")] Prt,
    #[strum(serialize = "suffix")] Suf,
    #[strum(serialize = "unclassified")] Unc,
    #[strum(serialize = "verb unspecified")] Vnspec,
    #[strum(serialize = "Ichidan verb")] V1,
    #[strum(serialize = "Ichidan verb - kureru special class")] V1S,
    #[strum(serialize = "Nidan verb with 'u' ending (archaic)")] V2aS,
    #[strum(serialize = "Nidan verb (upper class) with 'bu' ending (archaic)")] V2bK,
    #[strum(serialize = "Nidan verb (lower class) with 'bu' ending (archaic)")] V2bS,
    #[strum(serialize = "Nidan verb (upper class) with 'dzu' ending (archaic)")] V2dK,
    #[strum(serialize = "Nidan verb (lower class) with 'dzu' ending (archaic)")] V2dS,
    #[strum(serialize = "Nidan verb (upper class) with 'gu' ending (archaic)")] V2gK,
    #[strum(serialize = "Nidan verb (lower class) with 'gu' ending (archaic)")] V2gS,
    #[strum(serialize = "Nidan verb (upper class) with 'hu/fu' ending (archaic)")] V2hK,
    #[strum(serialize = "Nidan verb (lower class) with 'hu/fu' ending (archaic)")] V2hS,
    #[strum(serialize = "Nidan verb (upper class) with 'ku' ending (archaic)")] V2kK,
    #[strum(serialize = "Nidan verb (lower class) with 'ku' ending (archaic)")] V2kS,
    #[strum(serialize = "Nidan verb (upper class) with 'mu' ending (archaic)")] V2mK,
    #[strum(serialize = "Nidan verb (lower class) with 'mu' ending (archaic)")] V2mS,
    #[strum(serialize = "Nidan verb (lower class) with 'nu' ending (archaic)")] V2nS,
    #[strum(serialize = "Nidan verb (upper class) with 'ru' ending (archaic)")] V2rK,
    #[strum(serialize = "Nidan verb (lower class) with 'ru' ending (archaic)")] V2rS,
    #[strum(serialize = "Nidan verb (lower class) with 'su' ending (archaic)")] V2sS,
    #[strum(serialize = "Nidan verb (upper class) with 'tsu' ending (archaic)")] V2tK,
    #[strum(serialize = "Nidan verb (lower class) with 'tsu' ending (archaic)")] V2tS,
    #[strum(serialize = "Nidan verb (lower class) with 'u' ending and 'we' conjugation (archaic)")] V2wS,
    #[strum(serialize = "Nidan verb (upper class) with 'yu' ending (archaic)")] V2yK,
    #[strum(serialize = "Nidan verb (lower class) with 'yu' ending (archaic)")] V2yS,
    #[strum(serialize = "Nidan verb (lower class) with 'zu' ending (archaic)")] V2zS,
    #[strum(serialize = "Yodan verb with 'bu' ending (archaic)")] V4b,
    #[strum(serialize = "Yodan verb with 'gu' ending (archaic)")] V4g,
    #[strum(serialize = "Yodan verb with 'hu/fu' ending (archaic)")] V4h,
    #[strum(serialize = "Yodan verb with 'ku' ending (archaic)")] V4k,
    #[strum(serialize = "Yodan verb with 'mu' ending (archaic)")] V4m,
    #[strum(serialize = "Yodan verb with 'nu' ending (archaic)")] V4n,
    #[strum(serialize = "Yodan verb with 'ru' ending (archaic)")] V4r,
    #[strum(serialize = "Yodan verb with 'su' ending (archaic)")] V4s,
    #[strum(serialize = "Yodan verb with 'tsu' ending (archaic)")] V4t,
    #[strum(serialize = "Godan verb - -aru special class")] V5aru,
    #[strum(serialize = "Godan verb with 'bu' ending")] V5b,
    #[strum(serialize = "Godan verb with 'gu' ending")] V5g,
    #[strum(serialize = "Godan verb with 'ku' ending")] V5k,
    #[strum(serialize = "Godan verb - Iku/Yuku special class")] V5kS,
    #[strum(serialize = "Godan verb with 'mu' ending")] V5m,
    #[strum(serialize = "Godan verb with 'nu' ending")] V5n,
    #[strum(serialize = "Godan verb with 'ru' ending")] V5r,
    #[strum(serialize = "Godan verb with 'ru' ending (irregular verb)")] V5rI,
    #[strum(serialize = "Godan verb with 'su' ending")] V5s,
    #[strum(serialize = "Godan verb with 'tsu' ending")] V5t,
    #[strum(serialize = "Godan verb with 'u' ending")] V5u,
    #[strum(serialize = "Godan verb with 'u' ending (special class)")] V5uS,
    #[strum(serialize = "Godan verb - Uru old class verb (old form of Eru)")] V5uru,
    #[strum(serialize = "intransitive verb")] Vi,
    #[strum(serialize = "Kuru verb - special class")] Vk,
    #[strum(serialize = "irregular nu verb")] Vn,
    #[strum(serialize = "irregular ru verb, plain form ends with -ri")] Vr,
    #[strum(serialize = "noun or participle which takes the aux. verb suru")] Vs,
    #[strum(serialize = "su verb - precursor to the modern suru")] VsC,
    #[strum(serialize = "suru verb - included")] VsI,
    #[strum(serialize = "suru verb - special class")] VsS,
    #[strum(serialize = "transitive verb")] Vt,
    #[strum(serialize = "Ichidan verb - zuru verb (alternative form of -jiru verbs)")] Vz,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, strum::EnumString)]
#[derive(serde::Serialize, serde::Deserialize)]
#[rustfmt::skip]
pub enum Misc {
    #[strum(serialize = "abbreviation")] Abbreviation,
    #[strum(serialize = "archaic")] Archaic,
    #[strum(serialize = "character")] Character,
    #[strum(serialize = "children's language")] ChildrensLanguage,
    #[strum(serialize = "colloquial")] Colloquial,
    #[strum(serialize = "company name")] Company,
    #[strum(serialize = "creature")] Creature,
    #[strum(serialize = "dated term")] Dated,
    #[strum(serialize = "deity")] Deity,
    #[strum(serialize = "derogatory")] Derogatory,
    #[strum(serialize = "document")] Document,
    #[strum(serialize = "euphemistic")] Euphemistic,
    #[strum(serialize = "event")] Event,
    #[strum(serialize = "familiar language")] FamiliarLanguage,
    #[strum(serialize = "female term or language")] Female,
    #[strum(serialize = "fiction")] Fiction,
    #[strum(serialize = "formal or literary term")] Formal,
    #[strum(serialize = "given name or forename, gender not specified")] GivenName,
    #[strum(serialize = "group")] Group,
    #[strum(serialize = "historical term")] Historical,
    #[strum(serialize = "honorific or respectful (sonkeigo) language")] Honorific,
    #[strum(serialize = "humble (kenjougo) language")] Kenjougo,
    #[strum(serialize = "idiomatic expression")] IdiomaticExpr,
    #[strum(serialize = "jocular, humorous term")] Humorous,
    #[strum(serialize = "legend")] Legend,
    #[strum(serialize = "manga slang")] MangaSlang,
    #[strum(serialize = "male term or language")] Male,
    #[strum(serialize = "mythology")] Mythology,
    #[strum(serialize = "Internet slang")] InternetSlang,
    #[strum(serialize = "object")] Object,
    #[strum(serialize = "obsolete term")] Obsolete,
    #[strum(serialize = "onomatopoeic or mimetic word")] Onomatopoeic,
    #[strum(serialize = "organization name")] Organization,
    #[strum(serialize = "other")] Other,
    #[strum(serialize = "full name of a particular person")] Person,
    #[strum(serialize = "place name")] Place,
    #[strum(serialize = "poetical term")] Poetical,
    #[strum(serialize = "polite (teineigo) language")] Teineigo,
    #[strum(serialize = "product name")] Product,
    #[strum(serialize = "proverb")] Proverb,
    #[strum(serialize = "quotation")] Quote,
    #[strum(serialize = "rare term")] Rare,
    #[strum(serialize = "religion")] Relig,
    #[strum(serialize = "sensitive")] Sensitive,
    #[strum(serialize = "service")] Service,
    #[strum(serialize = "ship name")] Ship,
    #[strum(serialize = "slang")] Slang,
    #[strum(serialize = "railway station")] RailwayStation,
    #[strum(serialize = "family or surname")] Surname,
    #[strum(serialize = "word usually written using kana alone")] UsuallyKana,
    #[strum(serialize = "unclassified name")] UnclassifedName,
    #[strum(serialize = "vulgar expression or word")] Vulgar,
    #[strum(serialize = "work of art, literature, music, etc. name")] Artwork,
    #[strum(serialize = "rude or X-rated term (not displayed in educational software)")] XRated,
    #[strum(serialize = "yojijukugo")] Yojijukugo,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, strum::EnumString)]
#[derive(serde::Serialize, serde::Deserialize)]
#[rustfmt::skip]
pub enum Field {
    #[strum(serialize = "agriculture")] Agriculture,
    #[strum(serialize = "anatomy")] Anatomy,
    #[strum(serialize = "archeology")] Archeology,
    #[strum(serialize = "architecture")] Architecture,
    #[strum(serialize = "art, aesthetics")] Art,
    #[strum(serialize = "astronomy")] Astronomy,
    #[strum(serialize = "audiovisual")] Audiovisual,
    #[strum(serialize = "aviation")] Aviation,
    #[strum(serialize = "baseball")] Baseball,
    #[strum(serialize = "biochemistry")] Biochemistry,
    #[strum(serialize = "biology")] Biology,
    #[strum(serialize = "botany")] Botany,
    #[strum(serialize = "Buddhism")] Buddhism,
    #[strum(serialize = "business")] Business,
    #[strum(serialize = "card games")] CardGames,
    #[strum(serialize = "chemistry")] Chemistry,
    #[strum(serialize = "Christianity")] Christianity,
    #[strum(serialize = "clothing")] Clothing,
    #[strum(serialize = "computing")] Computing,
    #[strum(serialize = "crystallography")] Crystallography,
    #[strum(serialize = "dentistry")] Dentistry,
    #[strum(serialize = "ecology")] Ecology,
    #[strum(serialize = "economics")] Economics,
    #[strum(serialize = "electricity, elec. eng.")] ElectricalEngineering,
    #[strum(serialize = "electronics")] Electronics,
    #[strum(serialize = "embryology")] Embryology,
    #[strum(serialize = "engineering")] Engineering,
    #[strum(serialize = "entomology")] Entomology,
    #[strum(serialize = "film")] Film,
    #[strum(serialize = "finance")] Finance,
    #[strum(serialize = "fishing")] Fishing,
    #[strum(serialize = "food, cooking")] Food,
    #[strum(serialize = "gardening, horticulture")] Gardening,
    #[strum(serialize = "genetics")] Genetics,
    #[strum(serialize = "geography")] Geography,
    #[strum(serialize = "geology")] Geology,
    #[strum(serialize = "geometry")] Geometry,
    #[strum(serialize = "go (game)")] GoPlaying,
    #[strum(serialize = "golf")] Golf,
    #[strum(serialize = "grammar")] Grammar,
    #[strum(serialize = "Greek mythology")] GreekMythology,
    #[strum(serialize = "hanafuda")] Hanafuda,
    #[strum(serialize = "horse racing")] HorseRacing,
    #[strum(serialize = "kabuki")] Kabuki,
    #[strum(serialize = "law")] Law,
    #[strum(serialize = "linguistics")] Linguistics,
    #[strum(serialize = "logic")] Logic,
    #[strum(serialize = "martial arts")] MartialArts,
    #[strum(serialize = "mahjong")] Mahjong,
    #[strum(serialize = "manga")] Manga,
    #[strum(serialize = "mathematics")] Mathematics,
    #[strum(serialize = "mechanical engineering")] MechanicalEngineering,
    #[strum(serialize = "medicine")] Medicine,
    #[strum(serialize = "meteorology")] Meteorology,
    #[strum(serialize = "military")] Military,
    #[strum(serialize = "mining")] Mining,
    #[strum(serialize = "music")] Music,
    #[strum(serialize = "noh")] Noh,
    #[strum(serialize = "ornithology")] Ornithology,
    #[strum(serialize = "paleontology")] Paleontology,
    #[strum(serialize = "pathology")] Pathology,
    #[strum(serialize = "pharmacology")] Pharmacology,
    #[strum(serialize = "philosophy")] Philosophy,
    #[strum(serialize = "photography")] Photography,
    #[strum(serialize = "physics")] Physics,
    #[strum(serialize = "physiology")] Physiology,
    #[strum(serialize = "politics")] Politics,
    #[strum(serialize = "printing")] Printing,
    #[strum(serialize = "psychiatry")] Psychiatry,
    #[strum(serialize = "psychoanalysis")] Psychoanalysis,
    #[strum(serialize = "psychology")] Psychology,
    #[strum(serialize = "railway")] Railway,
    #[strum(serialize = "Roman mythology")] RomanMythology,
    #[strum(serialize = "Shinto")] Shinto,
    #[strum(serialize = "shogi")] Shogi,
    #[strum(serialize = "skiing")] Skiing,
    #[strum(serialize = "sports")] Sports,
    #[strum(serialize = "statistics")] Statistics,
    #[strum(serialize = "stock market")] StockMarket,
    #[strum(serialize = "sumo")] Sumo,
    #[strum(serialize = "telecommunications")] Telecommunications,
    #[strum(serialize = "trademark")] Trademark,
    #[strum(serialize = "television")] Television,
    #[strum(serialize = "video games")] VideoGames,
    #[strum(serialize = "zoology")] Zoology,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, strum::EnumString)]
#[derive(serde::Serialize, serde::Deserialize)]
#[rustfmt::skip]
pub enum Dialect {
    #[strum(serialize = "Brazilian")] Brazilian,
    #[strum(serialize = "Hokkaido-ben")] HokkaidoBen,
    #[strum(serialize = "Kansai-ben")] KansaiBen,
    #[strum(serialize = "Kantou-ben")] KantouBen,
    #[strum(serialize = "Kyoto-ben")] KyotoBen,
    #[strum(serialize = "Kyuushuu-ben")] KyuushuuBen,
    #[strum(serialize = "Nagano-ben")] NaganoBen,
    #[strum(serialize = "Osaka-ben")] OsakaBen,
    #[strum(serialize = "Ryuukyuu-ben")] RyuukyuuBen,
    #[strum(serialize = "Touhoku-ben")] TouhokuBen,
    #[strum(serialize = "Tosa-ben")] TosaBen,
    #[strum(serialize = "Tsugaru-ben")] TsugaruBen,
}
